class FoodTrucksController < ApplicationController
  before_action :set_food_truck, only: [:show, :edit, :update, :destroy]

  DEFAULT_CITY = "San Fransicso"
  DEFAULT_COUNTRY = "USA"
  DEFAULT_RANGE = 10 # in Kilometer
  DEFAULT_LIMIT = 500

  # GET /food_trucks
  # GET /food_trucks.json
  def index
    search_keywords = params[:keywords] ? params[:keywords] : "" 
    limit = params[:limit] ? params[:limit].to_i : DEFAULT_LIMIT
    range = params[:range] ? params[:range].to_f : DEFAULT_RANGE
    street_address = params[:street]
    city = params[:city] ? params[:city] : DEFAULT_CITY 
    country = params[:country] ? params[:country] : DEFAULT_COUNTRY
    full_address = [street_address, city, country].reject(&:blank?).join(', ')

    food_trucks = FoodTruck.filter full_address, search_keywords, range, limit
    @markers = build_map_markers(food_trucks)
    @markers << address_marker(full_address)

    respond_to do |format|
      format.json  { render :json => food_trucks }
      format.html
    end
  end

  def build_map_markers food_trucks
    Gmaps4rails.build_markers(food_trucks) do |truck, marker|
      marker.lat truck.location.lat
      marker.lng truck.location.lon
      marker.infowindow render_to_string( :partial => "food_trucks/infowindow",
                                          :formats => [:html],
                                          :locals => { :truck => truck})
    end
  end

  def address_marker full_address
    latitude, longitude = Geocoder.coordinates(full_address)
    {  :lat        => latitude, 
       :lng        => longitude,
       :infowindow => "<b>#{full_address}</b>",
       :picture    => {
         :url    => 'http://maps.google.com/mapfiles/ms/micons/flag.png',
         :width  =>'32', 
         :height =>'32'
       }
    }
  end

  ########## BEYOND THIS IS FREE CODE GENERATED BY SCAFFOLDs TO SUPPORT OTHER RESTful REQUESTS ##########

  # GET /food_trucks/1
  # GET /food_trucks/1.json
  def show
  end

  # GET /food_trucks/new
  def new
    @food_truck = FoodTruck.new
  end

  # GET /food_trucks/1/edit
  def edit
  end

  # POST /food_trucks
  # POST /food_trucks.json
  def create
    @food_truck = FoodTruck.new(food_truck_params)

    respond_to do |format|
      if @food_truck.save
        format.html { redirect_to @food_truck, notice: 'Food truck was successfully created.' }
        format.json { render :show, status: :created, location: @food_truck }
      else
        format.html { render :new }
        format.json { render json: @food_truck.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /food_trucks/1
  # PATCH/PUT /food_trucks/1.json
  def update
    respond_to do |format|
      if @food_truck.update(food_truck_params)
        format.html { redirect_to @food_truck, notice: 'Food truck was successfully updated.' }
        format.json { render :show, status: :ok, location: @food_truck }
      else
        format.html { render :edit }
        format.json { render json: @food_truck.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /food_trucks/1
  # DELETE /food_trucks/1.json
  def destroy
    @food_truck.destroy
    respond_to do |format|
      format.html { redirect_to food_trucks_url, notice: 'Food truck was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_food_truck
      @food_truck = FoodTruck.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def food_truck_params
      params.require(:food_truck).permit(:name, :vehicle_type, :food_items, :time_slots, :address, :location, :object_id)
    end
end
